# terraform-destroy.yml
name: "Terraform-Destroy"

on:
  workflow_dispatch:

jobs:
  destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest

    env:
      S3_STATE_BUCKET_NAME: tw-spring-asg-tfstate
      working-directory: ./terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # terraform에서 사용하는 USER의 키를 입력합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_TERRAFORM_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TERRAFORM_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: AWS Plan Copy
        run: aws s3 cp --region ap-northeast-2 s3://$S3_STATE_BUCKET_NAME/terraform.tfstate terraform.tfstate
        continue-on-error: true
        id: copy
        working-directory: ${{ env.working-directory }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        id: setup
        if: steps.copy.outcome == 'success'
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        if: steps.setup.outcome == 'success'
        run: terraform init
        working-directory: ${{ env.working-directory }}

      - name: Show Destroy plan
        id: plan
        if: steps.init.outcome == 'success'
        run: terraform plan -destroy
        working-directory: ${{ env.working-directory }}

      - name: Destroy resources jobs
        if: steps.plan.outcome == 'success'
        id: destroy
        run: terraform destroy -auto-approve
        working-directory: ${{ env.working-directory }}